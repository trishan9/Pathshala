/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as RegisterImport } from './routes/register'
import { Route as LoginImport } from './routes/login'
import { Route as AuthImport } from './routes/_auth'
import { Route as AuthIndexImport } from './routes/_auth/index'
import { Route as AuthInstructorInstructorImport } from './routes/_auth/instructor/_instructor'
import { Route as AuthInstructorInstructorCoursesImport } from './routes/_auth/instructor/_instructor/courses'
import { Route as AuthInstructorInstructorAnalyticsImport } from './routes/_auth/instructor/_instructor/analytics'

// Create Virtual Routes

const AuthInstructorImport = createFileRoute('/_auth/instructor')()
const AuthAnnouncementsLazyImport = createFileRoute('/_auth/announcements')()

// Create/Update Routes

const RegisterRoute = RegisterImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const AuthRoute = AuthImport.update({
  id: '/_auth',
  getParentRoute: () => rootRoute,
} as any)

const AuthInstructorRoute = AuthInstructorImport.update({
  id: '/instructor',
  path: '/instructor',
  getParentRoute: () => AuthRoute,
} as any)

const AuthIndexRoute = AuthIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthRoute,
} as any)

const AuthAnnouncementsLazyRoute = AuthAnnouncementsLazyImport.update({
  id: '/announcements',
  path: '/announcements',
  getParentRoute: () => AuthRoute,
} as any).lazy(() =>
  import('./routes/_auth/announcements.lazy').then((d) => d.Route),
)

const AuthInstructorInstructorRoute = AuthInstructorInstructorImport.update({
  id: '/_instructor',
  getParentRoute: () => AuthInstructorRoute,
} as any)

const AuthInstructorInstructorCoursesRoute =
  AuthInstructorInstructorCoursesImport.update({
    id: '/courses',
    path: '/courses',
    getParentRoute: () => AuthInstructorInstructorRoute,
  } as any)

const AuthInstructorInstructorAnalyticsRoute =
  AuthInstructorInstructorAnalyticsImport.update({
    id: '/analytics',
    path: '/analytics',
    getParentRoute: () => AuthInstructorInstructorRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/register': {
      id: '/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterImport
      parentRoute: typeof rootRoute
    }
    '/_auth/announcements': {
      id: '/_auth/announcements'
      path: '/announcements'
      fullPath: '/announcements'
      preLoaderRoute: typeof AuthAnnouncementsLazyImport
      parentRoute: typeof AuthImport
    }
    '/_auth/': {
      id: '/_auth/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AuthIndexImport
      parentRoute: typeof AuthImport
    }
    '/_auth/instructor': {
      id: '/_auth/instructor'
      path: '/instructor'
      fullPath: '/instructor'
      preLoaderRoute: typeof AuthInstructorImport
      parentRoute: typeof AuthImport
    }
    '/_auth/instructor/_instructor': {
      id: '/_auth/instructor/_instructor'
      path: '/instructor'
      fullPath: '/instructor'
      preLoaderRoute: typeof AuthInstructorInstructorImport
      parentRoute: typeof AuthInstructorRoute
    }
    '/_auth/instructor/_instructor/analytics': {
      id: '/_auth/instructor/_instructor/analytics'
      path: '/analytics'
      fullPath: '/instructor/analytics'
      preLoaderRoute: typeof AuthInstructorInstructorAnalyticsImport
      parentRoute: typeof AuthInstructorInstructorImport
    }
    '/_auth/instructor/_instructor/courses': {
      id: '/_auth/instructor/_instructor/courses'
      path: '/courses'
      fullPath: '/instructor/courses'
      preLoaderRoute: typeof AuthInstructorInstructorCoursesImport
      parentRoute: typeof AuthInstructorInstructorImport
    }
  }
}

// Create and export the route tree

interface AuthInstructorInstructorRouteChildren {
  AuthInstructorInstructorAnalyticsRoute: typeof AuthInstructorInstructorAnalyticsRoute
  AuthInstructorInstructorCoursesRoute: typeof AuthInstructorInstructorCoursesRoute
}

const AuthInstructorInstructorRouteChildren: AuthInstructorInstructorRouteChildren =
  {
    AuthInstructorInstructorAnalyticsRoute:
      AuthInstructorInstructorAnalyticsRoute,
    AuthInstructorInstructorCoursesRoute: AuthInstructorInstructorCoursesRoute,
  }

const AuthInstructorInstructorRouteWithChildren =
  AuthInstructorInstructorRoute._addFileChildren(
    AuthInstructorInstructorRouteChildren,
  )

interface AuthInstructorRouteChildren {
  AuthInstructorInstructorRoute: typeof AuthInstructorInstructorRouteWithChildren
}

const AuthInstructorRouteChildren: AuthInstructorRouteChildren = {
  AuthInstructorInstructorRoute: AuthInstructorInstructorRouteWithChildren,
}

const AuthInstructorRouteWithChildren = AuthInstructorRoute._addFileChildren(
  AuthInstructorRouteChildren,
)

interface AuthRouteChildren {
  AuthAnnouncementsLazyRoute: typeof AuthAnnouncementsLazyRoute
  AuthIndexRoute: typeof AuthIndexRoute
  AuthInstructorRoute: typeof AuthInstructorRouteWithChildren
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthAnnouncementsLazyRoute: AuthAnnouncementsLazyRoute,
  AuthIndexRoute: AuthIndexRoute,
  AuthInstructorRoute: AuthInstructorRouteWithChildren,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

export interface FileRoutesByFullPath {
  '': typeof AuthRouteWithChildren
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/announcements': typeof AuthAnnouncementsLazyRoute
  '/': typeof AuthIndexRoute
  '/instructor': typeof AuthInstructorInstructorRouteWithChildren
  '/instructor/analytics': typeof AuthInstructorInstructorAnalyticsRoute
  '/instructor/courses': typeof AuthInstructorInstructorCoursesRoute
}

export interface FileRoutesByTo {
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/announcements': typeof AuthAnnouncementsLazyRoute
  '/': typeof AuthIndexRoute
  '/instructor': typeof AuthInstructorInstructorRouteWithChildren
  '/instructor/analytics': typeof AuthInstructorInstructorAnalyticsRoute
  '/instructor/courses': typeof AuthInstructorInstructorCoursesRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_auth': typeof AuthRouteWithChildren
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/_auth/announcements': typeof AuthAnnouncementsLazyRoute
  '/_auth/': typeof AuthIndexRoute
  '/_auth/instructor': typeof AuthInstructorRouteWithChildren
  '/_auth/instructor/_instructor': typeof AuthInstructorInstructorRouteWithChildren
  '/_auth/instructor/_instructor/analytics': typeof AuthInstructorInstructorAnalyticsRoute
  '/_auth/instructor/_instructor/courses': typeof AuthInstructorInstructorCoursesRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ''
    | '/login'
    | '/register'
    | '/announcements'
    | '/'
    | '/instructor'
    | '/instructor/analytics'
    | '/instructor/courses'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/login'
    | '/register'
    | '/announcements'
    | '/'
    | '/instructor'
    | '/instructor/analytics'
    | '/instructor/courses'
  id:
    | '__root__'
    | '/_auth'
    | '/login'
    | '/register'
    | '/_auth/announcements'
    | '/_auth/'
    | '/_auth/instructor'
    | '/_auth/instructor/_instructor'
    | '/_auth/instructor/_instructor/analytics'
    | '/_auth/instructor/_instructor/courses'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  AuthRoute: typeof AuthRouteWithChildren
  LoginRoute: typeof LoginRoute
  RegisterRoute: typeof RegisterRoute
}

const rootRouteChildren: RootRouteChildren = {
  AuthRoute: AuthRouteWithChildren,
  LoginRoute: LoginRoute,
  RegisterRoute: RegisterRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_auth",
        "/login",
        "/register"
      ]
    },
    "/_auth": {
      "filePath": "_auth.tsx",
      "children": [
        "/_auth/announcements",
        "/_auth/",
        "/_auth/instructor"
      ]
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/register": {
      "filePath": "register.tsx"
    },
    "/_auth/announcements": {
      "filePath": "_auth/announcements.lazy.tsx",
      "parent": "/_auth"
    },
    "/_auth/": {
      "filePath": "_auth/index.tsx",
      "parent": "/_auth"
    },
    "/_auth/instructor": {
      "filePath": "_auth/instructor",
      "parent": "/_auth",
      "children": [
        "/_auth/instructor/_instructor"
      ]
    },
    "/_auth/instructor/_instructor": {
      "filePath": "_auth/instructor/_instructor.tsx",
      "parent": "/_auth/instructor",
      "children": [
        "/_auth/instructor/_instructor/analytics",
        "/_auth/instructor/_instructor/courses"
      ]
    },
    "/_auth/instructor/_instructor/analytics": {
      "filePath": "_auth/instructor/_instructor/analytics.tsx",
      "parent": "/_auth/instructor/_instructor"
    },
    "/_auth/instructor/_instructor/courses": {
      "filePath": "_auth/instructor/_instructor/courses.tsx",
      "parent": "/_auth/instructor/_instructor"
    }
  }
}
ROUTE_MANIFEST_END */
